//! Fonts mixins 

//Lato

@mixin f-Lato-Regular {
    font-family: 'Lato', sans-serif;
    font-weight: 400;
}

@mixin f-Lato-Medium {
    font-family: 'Lato', sans-serif;
    font-weight: 500;
}

@mixin f-Lato-SemiBold {
    font-family: 'Lato', sans-serif;
    font-weight: 600;
}

@mixin f-Lato-Bold {
    font-family: 'Lato', sans-serif;
    font-weight: 700;
}

// Roboto 
@mixin f-Roboto-Regular {
    font-family: 'Roboto', sans-serif;
    font-weight: 400;
}

@mixin f-Roboto-Medium {
    font-family: 'Roboto', sans-serif;
    font-weight: 500;
}

@mixin f-Roboto-Bold {
    font-family: 'Roboto', sans-serif;
    font-weight: 700;
}

//! Media screen mixin

// @mixin media($minmax, $media) {

//     @each $size,
//     $resolution in $sizes {
//         @if $media ==$size {
//             @media only screen and (#{$minmax}-width: $resolution) {
//                 @content;
//             }
//         }
//     }
// }


// Double
@function getPreviousSize($currentSize) {
    $keys: map-keys($sizes);
    $index: index($keys, $currentSize)-1;
    $value: map-values($sizes);
    @return nth($value, $index);
}

@mixin media($minmax, $media) {

    @each $size,
    $resolution in $sizes {
        @if $media ==$size {
            @if ($minmax  !="within") {
                @media only screen and (#{$minmax}-width: (($resolution))) {
                    @content;
                }
            }

            @else {
                @if (index(map-keys($sizes), $media) > 1) {
                    @media (min-width: (getPreviousSize($media))) and (max-width: (($resolution)-1)) {
                        @content;
                    }
                }

                @else {
                    @media (max-width: $resolution) {
                        @content;
                    }
                }
            }
        }
    }
}

// Sizes mixin 

// @mixin sizes ($width, $height) {
//     width: $width;
//     height: $height;
// }